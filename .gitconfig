[credential]
  helper = cache --timeout=3600
[user]
  email = melkon.or@gmail.com
  name = Orestis Melkonian
[color]
  ui = auto # covers diff = true, status = auto, branch = auto
  interactive = auto
[alias]
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

  # General
  s = status

  # Commits
  c = commit
  cm = commit -m
  cs = commit -s
  csm = commit -sm
  ca = commit --amend --date=format:rfc2822
  can = commit --amend --no-edit --date=format:rfc2822
  csa = commit -s --amend --date=format:rfc2822
  cf = "!f(){ git commit --fixup=\"$1\" && git rebase -i --autosquash \"$1\"^;};f"

  # Add
  a = add
  all = add -A
  ap = add -p

  # Diff
  d = diff --color-words
  dc = diff --cached --color-words

  # Branches
  rs = remote -v
  br = branch
  brd = branch -D
  brsu = branch --set-upstream-to
  rrm = remote rm
  rad = "!f() { git remote add origin git@github.com:"$1"/"$2".git; }; f"
  rad2 = "!f() { git remote add origin git@gitlab.com:"$1"/"$2".git; }; f"
  rau = "!f() { git remote add upstream git@github.com:"$1"/"$2".git; }; f"
  rau2 = "!f() { git remote add upstream git@gitlab.com:"$1"/"$2".git; }; f"
  fall = fetch --all

  # Pull
  pp = pull
  ppall = "!f() { git pull --ff-only --rebase && git submodule update --init --recursive; }; f"
  pr = pull --rebase

  # Push
  p = push origin
  pf = push -f origin
  pu = push -u origin master
  pa = !git all && git can && git pf
  wip = !git all && git cm '[WIP]'
  wipm = !git all && git cm '[WIP]' && git ca

  # Rebase
  r = rebase
  ri = rebase --interactive
  rco = rebase --continue
  rab = rebase --abort
  ron = rebase --onto

  # Checkout
  ch = checkout
  chm = checkout master
  chb = checkout -b
  chpr = "!f(){ \
    git fetch origin refs/pull/$1/head:pr/$1 && \
    git checkout pr/$1; \
  }; f"

  # Stash
  st = stash
  stl = stash list
  stp = stash pop
  sts = stash show
  stc = stash clear

  # Clone
  cl = "!f() { git clone git@github.com:"$1"/"$2".git; }; f"
  cl2 = "!f() { git clone git@gitlab.com:"$1"/"$2".git; }; f"
  cld = "!f() { git clone git@github.com:"$1"/"$2".git "$3"; }; f"
  cld2 = "!f() { git clone git@gitlab.com:"$1"/"$2".git "$3"; }; f"
  clbd = "!f() { git clone -b "$3" git@github.com:"$1"/"$2".git "$4"; }; f"
  clbd2 = "!f() { git clone -b "$3" git@gitlab.com:"$1"/"$2".git "$4"; }; f"
  clr = "!f() { git clone --recursive git@github.com:"$1"/"$2".git; }; f"
  clr2 = "!f() { git clone --recursive git@gitlab.com:"$1"/"$2".git; }; f"
  cls = "!f() { \
    org="$1"; shift; \
    for repo in "$@"; do \
      git clone git@github.com:"$org"/"$repo".git ; \
    done \
  }; f"

  # Undoing
  rsh = reset --hard
  rss = reset --soft
  unstage = reset HEAD .
  undoCommit = reset HEAD^
  undoLastCommit = reset --soft HEAD~
  undoamend = !git reset --soft HEAD@{1} && git commit -s

  # Ignore
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[[:lower:]]"

  # Tags
  tagLast = "!f() { git tag -fam \"Version $1\" v$1; }; f"
  ptags = !git p --tags
  pftags = !git pf --tags
  dtag = !git tag -d

  # Logging
  l = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  ll = log --stat --abbrev-commit
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  lg2 = log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'

[core]
  excludesfile = ~/.gitignore
  editor = vim
  pager = less -r
[push]
  default = current
[url "git@github.com:ghc/packages-"]
	insteadOf = git@github.com:ghc/packages/
[url "git://github.com/ghc/packages-"]
	insteadOf = git://github.com/ghc/packages/
[url "http://github.com/ghc/packages-"]
	insteadOf = http://github.com/ghc/packages/
[url "https://github.com/ghc/packages-"]
	insteadOf = https://github.com/ghc/packages/
[url "ssh://git\\@github.com/ghc/packages-"]
	insteadOf = ssh://git@github.com/ghc/packages/
[url "git\\@github.com:/ghc/packages-"]
	insteadOf = git@github.com:/ghc/packages/
[safe]
	directory = *

# Gitlab: references to MRs
[remote "origin"]
  fetch = +refs/merge-requests/*:refs/remotes/origin/merge-requests/*
