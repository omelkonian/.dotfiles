function cd {
  builtin cd "$@" && ls
}

function untar {
  for f in $@
  do
    case "${1##*.}" in
      "gz")
        tar xzvf $1 ;;
      *)
        tar xvf $1 ;;
    esac
  done
}

function mkcdir {
  mkdir -p -- "$1" &&
  cd -P -- "$1"
}

function add_to_path {
  export PATH=$PATH:"$1"
}
function add_to_LD_path {
  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:"$1"
}

function backup {
  set -x
  cp -r "$1" "$DROPBOX_BACKUP_FOLDER"
}

# SED
function find_and_replace {
  find . -maxdepth $1 -name $2 -exec sed -i -r 's/'$3'/'$4'/g' '{}' \;
  git diff --color-words $2
}
function find_and_replace_all {
  find . -maxdepth $1 -name "$2" -exec sed -i -r 's/'$3'/'$4'/g' '{}' \;
  git diff --color-words
}
function delete_between {
  sed -n '1,/"$1"/p;/"$2"/,$p' $3 > tmp && mv tmp $3
}

# virtualenv
function work {
  workon "$1"
  cdvirtualenv src/"$1"
}

# Viewer
function pdfview {
  $VIEWER $* &
}

# Editor
function edit {
  $EDITOR $1 --add
}

# Grep utilities
function grepAll {
  grep -nr "$1" **/**
}

function grepOn {
  ext=$1
  shift
  grep -nr $@ **/**.$ext
}

# Dyck
function dyckdot {
  for wo in $@
  do
    dot -Tpng $wo.dot > $wo.png && eog $wo.png &
  done
}

# Build PLFA website locally
function plfa {
  cd $HOME/git/plfa.github.io-master
  bundle exec jekyll serve
}

# Build TeX with references + view rendered PDF
function makeTex {
  set -exo pipefail
  xelatex $1.tex
  if [ -f $1.bib ]; then
    bibtex $1.aux
  fi
  evince --class='TeX' $1.pdf &
}

# cd + make + view PDFs
function makeAt {
  set -exo pipefail
  builtin cd "$1"
  curDir=$(basename "$(pwd)")

  # Build and view output
  if [ -f ./Makefile ]; then
    make
    evince --class='TeX' *.pdf &
  elif [ -f ./${curDir}.tex ]; then
    makeTex $curDir
  else
    echo "Cannot detect mode"
  fi
}

alias makeHere='makeAt .'

function list_repositories {
  grep -E '^deb\s' /etc/apt/sources.list /etc/apt/sources.list.d/*.list |\
  cut -f2- -d: |\
  cut -f2 -d' ' |\
  sed -re 's#http://ppa\.launchpad\.net/([^/]+)/([^/]+)(.*?)$#ppa:\1/\2#g'
}

# List all PPA repositories
function list_ppa {
  grep -E '^deb\s' /etc/apt/sources.list /etc/apt/sources.list.d/*.list |\
  cut -f2- -d: |\
  cut -f2 -d' ' |\
  sed -re 's#http://ppa\.launchpad\.net/([^/]+)/([^/]+)(.*?)$#ppa:\1/\2#g' |\
  grep '^ppa:'
}

# UoE Printing
function print_bw {
  for f in $@
  do
    lpr -P Cloud-Mono $f
  done
}

function print_cl {
  for f in $@
  do
    lpr -P Cloud-Colour $f
  done
}

# Checking all GIT repositories
function git_check_all_folders {
  curDir=$(pwd)
  builtin cd $GIT_ROOT
  for d in */ .*/
  do
    if [ ! -d $d/.git ]; then
      for dd in $d*/
      do
        if [ -d $dd/.git ] && [ -n "$(git -C $dd status --porcelain)" ]; then
          echo $dd
        fi
      done
    else
      if [ -n "$(git -C $d status --porcelain)" ]; then
        echo $d
      fi
    fi
  done
  builtin cd $curDir
}

# Process handling
function start_app {
  p_name=${1%% *}
  if [ -z "$(pgrep $p_name)" ] ; then
    $1 &
  fi
}

function kill_app {
  if [ -n "$(pgrep $1)" ] ; then
    kill -9 $(pgrep $1)
  fi
}

# Functional Bash
function map {
  local f="$1" && shift
  for arg; do
    "$f" "$arg"
  done
}

function compose {
  setopt aliases
  local f="$1" && shift
  local g="$1" && shift
  $g $($f $*)
  unsetopt aliases
}
