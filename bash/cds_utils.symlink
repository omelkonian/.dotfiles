PROD_DB="postgresql+psycopg2://orestis:123456@localhost:5432/invenio"
TEST_DB="postgresql+psycopg2://orestis:123456@localhost:5432/test-invenio"

cds_cd() {
  cdvirtualenv src/cds
}

work_cds3() {
  workon cds3
  cds_cd
}

cds_setup() {
  # export FLASK_DEBUG=1
  if [[ $SQLALCHEMY_DATABASE_URI != $PROD_DB ]];
  then
    export SQLALCHEMY_DATABASE_URI=$PROD_DB
  fi
  echo "PROD_DB: ${SQLALCHEMY_DATABASE_URI}"
}

cds_test_setup() {
  if [[ $SQLALCHEMY_DATABASE_URI != $TEST_DB ]];
  then
    export SQLALCHEMY_DATABASE_URI=$TEST_DB
  fi
  echo "TEST_DB: ${SQLALCHEMY_DATABASE_URI}"
}

cds_install() {
  cds_setup
  cds_cd
  python -O -m compileall .
  cds npm
  cdvirtualenv var/instance/static
  npm install
  cds collect -v
  cds assets build
  cds_cd
}

cds_init() {
  cds_setup
  cds db init
  cds db create
  cds users create test@test.ch -a
  cds index init
  cds files location default /tmp --default
}

cds_fixtures() {
  cds_setup
  cds fixtures sequence_generator
  cds fixtures categories
  cds fixtures pages
  cds fixtures videos
}

cds_del() {
  cds_setup
  cds db destroy --yes-i-know
  cds index destroy --yes-i-know
}

cds_all() {
  cds_install
  cds_init
  cds_fixtures
}

cds_reset() {
  cds_del
  cds_all
}

cds_run() {
  cds_setup
  cds run --with-threads --debugger
}

cds_run_single() {
  cds_setup
  cds run --debugger
}

cds_celery() {
  cds_setup
  celery -A cds.celery worker -l info
}

cds_test() {
  cds_test_setup
  cds_cd
  ./run-tests.sh
}
