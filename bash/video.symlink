alias restart_xserver="sudo service lightdm.service restart"
 
function getBuiltinScreen {
  case $(hostname) in
    "omelkonian-XPS-15-9560") # Dell
      echo "eDP1" ;;
    *) # HP
      echo "LVDS1" ;;
  esac
}

# Setup screen variables, depending on host machine
HDMI="HDMI1"
BUILTIN=$(getBuiltinScreen)

 # xrandr utilities
function mirrorScreens {
  xrandr --output $BUILTIN --auto --output $HDMI --auto
}

function setResolution {
  xrandr --output $HDMI --mode $1
}

function connected_HDMI {
  [ -n "$(xrandr | grep $HDMI | grep " connected ")" ]
}

function selected_HDMI {
  [ -n "$(xrandr --listmonitors | grep $HDMI)" ]
}

# Setup screens
function setup_screens {
  # Spawn top icon tray
  kill_app "trayer"
  # trayer --edge top --monitor primary --align right --SetDockType true --SetPartialStrut true --expand true --width 15 --height 12 --transparent true --tint 0x000000 &
  trayer --edge top --align right --monitor primary --widthtype percent --width 10 --height 19 --transparent true --alpha 0 --tint 0x000000 &

  # Set background image
  if [ -f $BACKGROUND_IMAGE ]; then
    nitrogen --set-auto $BACKGROUND_IMAGE
  fi

  # Enable screens depending on host machine
  if [ -n "$(xrandr | grep $HDMI | grep " connected ")" ]; then
  # if connected_HDMI; then
      # Docked
      xrandr --output $BUILTIN --off --output $HDMI --auto
  else
      # Undocked
      xrandr --output $BUILTIN --auto --output $HDMI --off
  fi
}

# Brightness control
function changeBrightness {
  if (! connected_HDMI) && selected_HDMI; then
    setup_screens
  fi
  xbacklight $@
}

# Image editing
function ogv2gif {
  FPS=15
  WIDTH=1920
  tmp='tmp_palette.png'
  for inputFile in $@
  do
    outputFile="${inputFile%.*}"


    #Generate palette for better quality
    ffmpeg -i $inputFile -vf fps=$FPS,scale=$WIDTH:-1:flags=lanczos,palettegen $tmp

    #Generate gif using palette
    ffmpeg -i $inputFile -i $tmp -loop 0 -filter_complex "fps=$FPS,scale=$WIDTH:-1:flags=lanczos[x];[x][1:v]paletteuse" ${outputFile}.gif

    rm $tmp
  done
}

# Rotate a video file by the given degrees (clockwise)
function rotate {
  ffmpeg -i "$2" -map_metadata 0 -metadata:s:v rotate="$1" -codec copy R"$2" \
   && mv R"$2" "$2"
}

function reminderAt {
  sleep $*
  notify-send "Friendly Reminder" "Time for questions!! Stop it!!"
}

