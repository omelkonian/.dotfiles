alias restartPulse='pulseaudio -k'
alias restartAlsa='sudo alsa force-reload'
alias restart_sound='restartPulse && restartAlsa'
alias fixSound="pactl exit"
alias fixSound2="amixer -D pulse set Master 1+ toggle"
alias unmute="pacmd sfet-sink-mute 0 0"

### Troubleshooting ###

# -- install common Sound card drivers and needed packages in Ubuntu.
# $ apt-in build-essential linux-headers-`uname -r` alsa-base alsa-firmwa

# -- reinstall Alsa and Pulseaudio
# $ sudo apt-get remove --purge alsa-base pulseaudio
# $ apt-in alsa-base pulseaudio

# -- listing devices/etc
# $ aplay -l
# $ aplay -L
# $ lspci -b -vv
# $ lspci -nnk | grep -A2 Audio

# -- timidity/alsa problems
# $ sudo fuser -v /dev/snd/*
# $ killall timidity

# Conversion
function mp3_to_wav {
  fname="${1%.*}"
  lame --decode "${fname}".mp3 "${fname}".wav
}

# Editing
function extract_left_channel {
  fname="${1%.*}"
  sox "${fname}".wav -c 1 "${fname}"_L.wav remix 1
}
function extract_right_channel {
  fname="${1%.*}"
  sox "${fname}".wav -c 1 "${fname}"_R.wav remix 2
}
function adjust_tempo {
  factor=$(zenity --entry --text 'What percentage of the original tempo? (eg 0.8)')
  fname="${1%.*}"
  ext="${1##*.}"
  echo "fname: $fname, ext: $ext"
  sox "$1" "$fname"-"$factor"."$ext" tempo "$factor"
}

function extract_channels {
  ext="${1##*.}"
  case $ext in
    "mp3")
      mp3_to_wav "$@" ;;
  esac
  extract_left_channel "$@"
  extract_right_channel "$@"
}

# Speaker test
function check_channels {
  # play ~/Sounds/testLR.wav
  speaker-test -t wav -c 2 &
}

# Spotify
function toSpotifyURI {
  echo spotify:album:$(echo "$1" | cut -d/ -f5 | cut -d\? -f1 | cut -d: -f3)
}

function ripAt {
  folder=$1 && shift
  map toSpotifyURI $* | xargs --open-tty spotify-ripper -d $folder
}

alias rip='ripAt $MUSIC_ROOT'
alias rip_local='ripAt $LOCAL_MUSIC_ROOT'
alias rip_from_file='rip ~/Dropbox/toRip.txt'

## Sink management (Pulse Audio)
function searchSink {
  pactl list sinks | grep $1 -B 2 | grep 'Sink #' | grep -o -E '[[:digit:]]+'
}

function getSinkIndex {
  internal=$(searchSink "Name:.*alsa_output.pci")
  external=$(searchSink "Name:.*Saffire")
  bluetooth=$(searchSink "Name:.*bluez")

  if [[ $bluetooth ]]; then
    i=$bluetooth
  elif [[ $external ]]; then
    i=$external
  elif [[ $internal ]]; then
    i=$internal
  else
    i=0
  fi
  pacmd set-default-sink $i
  echo $i
}

function getSinkVolume {
  i=$(getSinkIndex)
  pactl list sinks | grep "Sink #${i}" -A10 | grep -o -E '[[:digit:]]+%' | head -1
}

function setSinkVolume {
  i=$(getSinkIndex)
  pactl set-sink-volume $i $1
}

# function getDefaultSink {
#   pacmd list-sinks | awk '$1 == "*" && $2 == "index:" {print $3}'
# }

## Music controls
function audio__play_pause {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --play-pause
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --play-pause
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --play-pause
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --play-pause
  fi
}

function audio__next {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --next
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --next
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --next
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --next
  fi
}

function audio__prev {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --prev
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --prev
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --previous
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --previous
  fi
}
