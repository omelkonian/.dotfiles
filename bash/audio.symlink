source /home/omelkonian/git/.dotfiles/bash/0-constants.symlink
source /home/omelkonian/git/.dotfiles/bash/2-aliases.symlink

alias restartPulse='pulseaudio -k && pulseaudio --start'
alias restartAlsa='sudo alsa force-reload'
alias restart_sound='restartPulse && restartAlsa'
alias fixSound="pactl exit"
alias fixSound2="amixer -D pulse set Master 1+ toggle"
alias unmute="pacmd sfet-sink-mute 0 0"

### Troubleshooting ###

# -- install common Sound card drivers and needed packages in Ubuntu.
# $ apt-in build-essential linux-headers-`uname -r` alsa-base alsa-firmwa

# -- reinstall Alsa and Pulseaudio
# $ sudo apt-get remove --purge alsa-base pulseaudio
# $ apt-in alsa-base pulseaudio

# -- listing devices/etc
# $ aplay -l
# $ aplay -L
# $ lspci -b -vv
# $ lspci -nnk | grep -A2 Audio

# -- timidity/alsa problems
# $ sudo fuser -v /dev/snd/*
# $ killall timidity

# Conversion
function mp3_to_wav {
  fname="${1%.*}"
  lame --decode "${fname}".mp3 "${fname}".wav
}

# Editing
function extract_left_channel {
  fname="${1%.*}"
  sox "${fname}".wav -c 1 "${fname}"_L.wav remix 1
}
function extract_right_channel {
  fname="${1%.*}"
  sox "${fname}".wav -c 1 "${fname}"_R.wav remix 2
}
function adjust_tempo {
  factor=$(zenity --entry --text 'What percentage of the original tempo? (eg 0.8)')
  f="$@"
  fname="${f%.*}"
  ext="${f##*.}"
  sox "$f" "$fname"-"$factor"."$ext" tempo "$factor"
}

function extract_channels {
  f="$@"
  ext="${f##*.}"
  case $ext in
    "mp3")
      mp3_to_wav $f ;;
  esac
  extract_left_channel "$f"
  extract_right_channel "$f"
}

# Speaker test
function check_channels {
  # play ~/Sounds/testLR.wav
  speaker-test -t wav -c 2 &
}

# Mic test
alias recordVoice='sox -t alsa default test.wav && play test.wav && rm test.wav'

# Spotify
function toSpotifyURI {
  echo spotify:album:$(echo "$1" | cut -d/ -f5 | cut -d\? -f1 | cut -d: -f3)
}

function ripAt {
  folder=$1 && shift
  spotdl --output "$folder/{album-artist}/{album}/{track-number}-{title}.{output-ext}" download $*
}

function ripPlaylistsAt {
  folder=$1 && shift
  spotdl --output "$folder/\$PLAYLISTS/{list-name}/{list-position}-{title}.{output-ext}" download $*
}

alias rip='ripAt $MUSIC_ROOT'
alias ripPlaylists='ripPlaylistsAt $MUSIC_ROOT'
alias rip_local='ripAt $LOCAL_MUSIC_ROOT'
alias ripPlaylists_local='ripPlaylistsAt $LOCAL_MUSIC_ROOT'
alias rip_temp='ripAt $TEMP_MUSIC_ROOT'
alias ripPlaylists_temp='ripPlaylistsAt $TEMP_MUSIC_ROOT'
alias rip_from_file='rip $MEHOME/Dropbox/toRip.txt'
alias ripPlaylists_from_file='ripPlaylists $MEHOME/Dropbox/toRip.txt'

# Playlists
function printPlaylist {
  echo '<playlist>'
  echo '  <trackList>'
  for f in "$@"; do
    echo '    <track>'
    echo "      <location>$f</location>"
    echo '    </track>'
  done
  echo '  </trackList>'
  echo '</playlist>'
}

function mkPlaylist {
  # inputs are a list of file URIs, e.g. file:///path/to/file.mid
  out=$(zenity --entry --text 'Give output filename for .xspf playlist:')
  printPlaylist $@ > "$out.xspf"
}

## PulseAudio (card management)
CARD_ID=$(pactl list cards | grep 'Card #' | cut -d '#' -f2 | tail -n1)
CARD_PATH="/sys/class/drm/card$CARD_ID/"
HDMI_CARD="card$CARD_ID-HDMI-A-1"
AUDIO_INPUT="analog-stereo"
AUDIO_OUTPUT_ANALOG="analog-stereo"
AUDIO_OUTPUT_HDMI="hdmi-stereo"
PULSE_SERVER="unix:/run/user/$USER_ID/pulse/native"

function audio__set_card_profile {
  local AUDIO_OUTPUT=$1 && shift
  sudo -u "$USER" pactl --server $PULSE_SERVER \
    set-card-profile $CARD_ID output:"$AUDIO_OUTPUT"+input:"$AUDIO_INPUT"
}

function connected_HDMI_sound {
  [ $(<$CARD_PATH/$HDMI_CARD/status) == connected ]
}

function audio__selected {
  pacmd list-cards | grep -q "active profile: <output:$1"
}

function selected_HDMI_sound {
  audio__selected "$AUDIO_OUTPUT_HDMI"
}

function toggle_HDMI {
  selected_HDMI_sound && \
    audio__set_card_profile "$AUDIO_OUTPUT_ANALOG" || \
    audio__set_card_profile "$AUDIO_OUTPUT_HDMI"
}

function setup_audio {
  if [ connected_HDMI_sound ]; then
    audio__set_card_profile "$AUDIO_OUTPUT_HDMI" 
  else
    audio__set_card_profile "$AUDIO_OUTPUT_ANALOG"
  fi
}

## PulseAudio (sink management)
function searchSink {
  pactl list sinks | grep $1 -B 2 | grep 'Sink #' | grep -o -E '[[:digit:]]+'
}

function getSinkIndex {
  internal=$(searchSink "Name:.*alsa_output.pci")
  external=$(searchSink "Name:.*Saffire")
  bluetooth=$(searchSink "Name:.*bluez")

  if [[ $bluetooth ]]; then
    i=$bluetooth
  elif [[ $external ]]; then
    i=$external
  elif [[ $internal ]]; then
    i=$internal
  else
    i=0
  fi
  pacmd set-default-sink $i
  echo $i
}

function getSinkVolume {
  i=$(getSinkIndex)
  pactl list sinks | grep "Sink #${i}" -A10 | grep -o -E '[[:digit:]]+%' | head -1
}

function setSinkVolume {
  i=$(getSinkIndex)
  pactl set-sink-volume $i $1
}

# function getDefaultSink {
#   pacmd list-sinks | awk '$1 == "*" && $2 == "index:" {print $3}'
# }

## Music controls
function audio__play_pause {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --play-pause
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --play-pause
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --play-pause
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --play-pause
  fi
}

function audio__next {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --next
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --next
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --next
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --next
  fi
}

function audio__prev {
  if [ -n "$(pgrep clementine)" ] ; then
    clementine --previous
  fi
  if [ -n "$(pgrep rhythmbox)" ] ; then
    rhythmbox-client --previous
  fi
  if [ -n "$(pgrep yarock)" ] ; then
    yarock --previous
  fi
  if [ -n "$(pgrep totem)" ] ; then
    totem --previous
  fi
}

# Bluetooth speakers
JBL_CHARGE_4="98:52:3D:C4:9B:12"
MI_EARPHONES="6C:CE:44:FC:C8:AA"
LP_EARPHONES="90:3F:C7:8F:00:D8"

function bluetooth__enabled {
  # [ -n $(systemctl status bluetooth.service | grep "active (running)") ]
  [ $(systemctl is-enabled bluetooth.service) == "enabled" ]
}

function bluetooth__connected {
  device="$1" && shift
  hcitool con | grep -q $device
}

function bluetooth__reset {
  device="$1" && shift
  (
   echo -e "remove $device \n scan on \n"
   sleep 10
   echo -e "pair $device \n trust $device \n connect $device \n scan off \n"
   sleep 10
   echo -e "quit \n"
  ) | bluetoothctl
}

function bluetooth__disconnect {
  device="$1" && shift
  (
   echo -e "disconnect $device \n"
   sleep 5
   echo -e "quit \n"
  ) | bluetoothctl
}

function bluetooth__connect {
  device="$1" && shift
  (
   echo -e "connect $device \n"
   sleep 5
   echo -e "quit \n"
  ) | bluetoothctl
}

function bluetooth__toggle {
  device="$1" && shift
  if bluetooth__connected $device; then
    bluetooth__disconnect $device
  else
    bluetooth__connect $device
    # Reset if connection fails
    if ! bluetooth__connected $device; then
      zenity --question --text "Connection failed: reset $device?" && \
        bluetooth__reset $device
    fi
  fi
}
